/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IReactive {
  export type LogRecordStruct = {
    blockNumber: BigNumberish;
    blockHash: BytesLike;
    transactionIndex: BigNumberish;
    source: AddressLike;
    chainId: BigNumberish;
    key: BytesLike;
  };

  export type LogRecordStructOutput = [
    blockNumber: bigint,
    blockHash: string,
    transactionIndex: bigint,
    source: string,
    chainId: bigint,
    key: string
  ] & {
    blockNumber: bigint;
    blockHash: string;
    transactionIndex: bigint;
    source: string;
    chainId: bigint;
    key: string;
  };
}

export interface AbstractReactiveInterface extends Interface {
  getFunction(
    nameOrSignature: "isSubscribed" | "react" | "subscribe" | "unsubscribe"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isSubscribed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "react",
    values: [IReactive.LogRecordStruct]
  ): string;
  encodeFunctionData(functionFragment: "subscribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "isSubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "react", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
}

export interface AbstractReactive extends BaseContract {
  connect(runner?: ContractRunner | null): AbstractReactive;
  waitForDeployment(): Promise<this>;

  interface: AbstractReactiveInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isSubscribed: TypedContractMethod<[], [boolean], "view">;

  react: TypedContractMethod<
    [record: IReactive.LogRecordStruct],
    [void],
    "nonpayable"
  >;

  subscribe: TypedContractMethod<[], [void], "payable">;

  unsubscribe: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isSubscribed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "react"
  ): TypedContractMethod<
    [record: IReactive.LogRecordStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "unsubscribe"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
