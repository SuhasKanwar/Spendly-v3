/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IReactive {
  export type LogRecordStruct = {
    blockNumber: BigNumberish;
    blockHash: BytesLike;
    transactionIndex: BigNumberish;
    source: AddressLike;
    chainId: BigNumberish;
    key: BytesLike;
  };

  export type LogRecordStructOutput = [
    blockNumber: bigint,
    blockHash: string,
    transactionIndex: bigint,
    source: string,
    chainId: bigint,
    key: string
  ] & {
    blockNumber: bigint;
    blockHash: string;
    transactionIndex: bigint;
    source: string;
    chainId: bigint;
    key: string;
  };
}

export interface ReactiveBuySellInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH9"
      | "buyThreshold"
      | "checkAndTrade"
      | "isSubscribed"
      | "poolFee"
      | "priceFeed"
      | "react"
      | "sellThreshold"
      | "subscribe"
      | "swapRouter"
      | "targetToken"
      | "unsubscribe"
      | "updateThresholds"
      | "withdrawETH"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SwapExecuted"): EventFragment;

  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "react",
    values: [IReactive.LogRecordStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sellThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "subscribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateThresholds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAndTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "react", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace SwapExecutedEvent {
  export type InputTuple = [
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReactiveBuySell extends BaseContract {
  connect(runner?: ContractRunner | null): ReactiveBuySell;
  waitForDeployment(): Promise<this>;

  interface: ReactiveBuySellInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WETH9: TypedContractMethod<[], [string], "view">;

  buyThreshold: TypedContractMethod<[], [bigint], "view">;

  checkAndTrade: TypedContractMethod<[], [void], "nonpayable">;

  isSubscribed: TypedContractMethod<[], [boolean], "view">;

  poolFee: TypedContractMethod<[], [bigint], "view">;

  priceFeed: TypedContractMethod<[], [string], "view">;

  react: TypedContractMethod<
    [arg0: IReactive.LogRecordStruct],
    [void],
    "nonpayable"
  >;

  sellThreshold: TypedContractMethod<[], [bigint], "view">;

  subscribe: TypedContractMethod<[], [void], "payable">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  targetToken: TypedContractMethod<[], [string], "view">;

  unsubscribe: TypedContractMethod<[], [void], "nonpayable">;

  updateThresholds: TypedContractMethod<
    [_buyThreshold: BigNumberish, _sellThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WETH9"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkAndTrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isSubscribed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "poolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "react"
  ): TypedContractMethod<
    [arg0: IReactive.LogRecordStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "targetToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unsubscribe"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateThresholds"
  ): TypedContractMethod<
    [_buyThreshold: BigNumberish, _sellThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SwapExecuted"
  ): TypedContractEvent<
    SwapExecutedEvent.InputTuple,
    SwapExecutedEvent.OutputTuple,
    SwapExecutedEvent.OutputObject
  >;

  filters: {
    "SwapExecuted(address,address,uint256,uint256)": TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
    SwapExecuted: TypedContractEvent<
      SwapExecutedEvent.InputTuple,
      SwapExecutedEvent.OutputTuple,
      SwapExecutedEvent.OutputObject
    >;
  };
}
